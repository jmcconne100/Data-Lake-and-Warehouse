AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates a VPC, public subnet, EC2 instance, S3 bucket, IAM role with S3 access.'

Resources:
  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  # Internet Gateway
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  # Public Subnet
  MyPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: MyPublicSubnet

  # Route Table
  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: MyPublicRouteTable

  # Route to Internet Gateway
  MyRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  # Associate Route Table with Subnet
  MySubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet
      RouteTableId: !Ref MyRouteTable

  # S3 VPC Gateway Endpoint
  MyS3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      RouteTableIds:
        - !Ref MyRouteTable
      VpcEndpointType: Gateway

  # Security Group - Only Allow S3 Traffic via VPC Endpoint
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow only S3 access via VPC Endpoint'
      VpcId: !Ref MyVPC
      DependsOn: MyS3VPCEndpoint  # Ensures VPC Endpoint exists before applying the rule
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          DestinationPrefixListId: "pl-6ba54002"  # <- Replace with the actual S3 Prefix List ID for your region
      Tags:
        - Key: Name
          Value: MyRestrictedSecurityGroup

  # IAM Role
  MyEC2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: S3FullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource: '*'

  # IAM Instance Profile
  MyEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref MyEC2IAMRole

  # EC2 Instance
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-01eb4eefd88522422  # Update with the latest AMI for your region
      InstanceType: t2.micro
      SubnetId: !Ref MyPublicSubnet
      SecurityGroupIds:
        - !Ref MySecurityGroup
      IamInstanceProfile: !Ref MyEC2InstanceProfile
      KeyName: CloudFormationKeyPair
      Tags:
        - Key: Name
          Value: MyEC2Instance

  # S3 Bucket
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 'jon-s3-bucket-for-redshift'

Outputs:
  VPCId:
    Description: 'VPC ID'
    Value: !Ref MyVPC

  EC2PublicIP:
    Description: 'Public IP of the EC2 instance'
    Value: !GetAtt MyEC2Instance.PublicIp

  S3BucketName:
    Description: 'S3 Bucket Name'
    Value: !Ref MyS3Bucket
