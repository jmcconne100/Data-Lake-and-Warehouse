AWSTemplateFormatVersion: '2010-09-09'
Description: Lakehouse infrastructure with Lambda containers and scheduling

Parameters:
  BucketName:
    Type: String
    Default: jon-s3-bucket-for-redshift

Resources:

  LakehouseBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaS3ExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${BucketName}/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: '*'
              - Effect: Allow
                Action:
                 - lambda:InvokeFunction
                Resource:
                  - arn:aws:lambda:us-west-1:286036002000:function:GenerateCustomers
                  - arn:aws:lambda:us-west-1:286036002000:function:GenerateOrders

  CreateDimensionsLambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: CreateDimensions
      Role: !GetAtt LambdaExecutionRole.Arn
      PackageType: Image
      Code:
        ImageUri: 286036002000.dkr.ecr.us-west-1.amazonaws.com/simple-docker-service-0678d45e4fd7:latest
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName

  GenerateProductsLambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: GenerateProducts
      Role: !GetAtt LambdaExecutionRole.Arn
      PackageType: Image
      Code:
        ImageUri: 286036002000.dkr.ecr.us-west-1.amazonaws.com/simple-docker-service-06c54edde72f:latest
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName

  GenerateCustomersLambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: GenerateCustomers
      Role: !GetAtt LambdaExecutionRole.Arn
      PackageType: Image
      Code:
        ImageUri: 286036002000.dkr.ecr.us-west-1.amazonaws.com/simple-docker-service-02526725bcad:latest
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName

  GenerateOrdersLambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: GenerateOrders
      Role: !GetAtt LambdaExecutionRole.Arn
      PackageType: Image
      Code:
        ImageUri: 286036002000.dkr.ecr.us-west-1.amazonaws.com/simple-docker-service-06b0d872c033:latest
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName

  GenerateStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt LambdaExecutionRole.Arn
      StateMachineName: GenerateFactTablesFlow
      DefinitionString: !Sub |
        {
          "StartAt": "GenerateCustomers",
          "States": {
            "GenerateCustomers": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${GenerateCustomersLambda}"
              },
              "Next": "GenerateOrders"
            },
            "GenerateOrders": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${GenerateOrdersLambda}"
              },
              "End": true
            }
          }
        }

  WeeklyStepFunctionTrigger:
    Type: AWS::Events::Rule
    Properties:
      Name: WeeklyGenerateFactsTrigger
      ScheduleExpression: cron(0 1 ? * SUN *)  # Every Sunday 1AM UTC
      State: ENABLED
      Targets:
        - Arn: !GetAtt GenerateStepFunction.Arn
          Id: StepFunctionTarget
          RoleArn: !GetAtt EventBridgeToStepFunctionRole.Arn


  EventBridgeToStepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EventBridgeToStepFunctionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowStartExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !GetAtt GenerateStepFunction.Arn


  PermissionToInvokeStepFunction:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AllowEventBridgeToTriggerStepFunction
      Roles:
        - !Ref LambdaExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource: !GetAtt GenerateStepFunction.Arn

Outputs:
  StepFunctionName:
    Description: Step function to run customers and orders
    Value: !Ref GenerateStepFunction
