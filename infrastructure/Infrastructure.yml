AWSTemplateFormatVersion: '2010-09-09'
Description: Lakehouse infrastructure with Lambda containers and scheduling

Parameters:
  BucketName:
    Type: String
    Default: jon-s3-bucket-for-redshift

Resources:

  LakehouseBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaS3ExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${BucketName}/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - arn:aws:lambda:us-west-1:286036002000:function:GenerateCustomers
                  - arn:aws:lambda:us-west-1:286036002000:function:GenerateOrders
                  - arn:aws:lambda:us-west-1:286036002000:function:CreateDimensions
                  - arn:aws:lambda:us-west-1:286036002000:function:GenerateProducts
                  - arn:aws:lambda:us-west-1:286036002000:function:StartGlueCrawlerLambda
                  - arn:aws:lambda:us-west-1:286036002000:function:StartGlueJobLambda
              - Effect: Allow
                Action:
                  - glue:StartJobRun
                  - glue:GetJobRun
                  - glue:GetJobRuns
                Resource: arn:aws:glue:us-west-1:286036002000:job/RedshiftToParquetJob
              - Effect: Allow
                Action:
                  - glue:StartCrawler
                Resource: arn:aws:glue:us-west-1:286036002000:crawler/ProcessedDataCrawler

  CreateDimensionsLambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: CreateDimensions
      Role: !GetAtt LambdaExecutionRole.Arn
      PackageType: Image
      Code:
        ImageUri: 286036002000.dkr.ecr.us-west-1.amazonaws.com/simple-docker-service-0678d45e4fd7:latest
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName

  GenerateProductsLambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: GenerateProducts
      Role: !GetAtt LambdaExecutionRole.Arn
      PackageType: Image
      Code:
        ImageUri: 286036002000.dkr.ecr.us-west-1.amazonaws.com/simple-docker-service-02225da002d3:latest
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName

  GenerateCustomersLambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: GenerateCustomers
      Role: !GetAtt LambdaExecutionRole.Arn
      PackageType: Image
      Code:
        ImageUri: 286036002000.dkr.ecr.us-west-1.amazonaws.com/simple-docker-service-02526725bcad:latest
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName

  GenerateOrdersLambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: GenerateOrders
      Role: !GetAtt LambdaExecutionRole.Arn
      PackageType: Image
      Code:
        ImageUri: 286036002000.dkr.ecr.us-west-1.amazonaws.com/simple-docker-service-06b0d872c033:latest
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName

  GenerateStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt LambdaExecutionRole.Arn
      StateMachineName: GenerateFactTablesFlow
      DefinitionString: !Sub |
        {
          "StartAt": "GenerateCustomers",
          "States": {
            "GenerateCustomers": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${GenerateCustomersLambda}"
              },
              "Next": "GenerateOrders"
            },
            "GenerateOrders": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${GenerateOrdersLambda}"
              },
              "End": true
            }
          }
        }

  WeeklyStepFunctionTrigger:
    Type: AWS::Events::Rule
    Properties:
      Name: WeeklyGenerateFactsTrigger
      ScheduleExpression: cron(0 1 ? * SUN *)  # Every Sunday 1AM UTC
      State: ENABLED
      Targets:
        - Arn: !GetAtt GenerateStepFunction.Arn
          Id: StepFunctionTarget
          RoleArn: !GetAtt EventBridgeToStepFunctionRole.Arn


  EventBridgeToStepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EventBridgeToStepFunctionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowStartExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !GetAtt GenerateStepFunction.Arn


  PermissionToInvokeStepFunction:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AllowEventBridgeToTriggerStepFunction
      Roles:
        - !Ref LambdaExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource: !GetAtt GenerateStepFunction.Arn

  GlueJobRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: GlueJobExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: GlueS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - arn:aws:s3:::jon-s3-bucket-for-redshift
                  - arn:aws:s3:::jon-s3-bucket-for-redshift/*
                  - arn:aws:s3:::jon-scripts-bucket
                  - arn:aws:s3:::jon-scripts-bucket/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - glue:GetDatabase
                  - glue:GetTable
                  - glue:CreateTable
                  - glue:UpdateTable
                  - glue:DeleteTable
                  - glue:GetCrawler
                  - glue:StartCrawler
                  - glue:CreateCrawler
                  - glue:UpdateCrawler
                Resource: '*'

  RedshiftToParquetGlueJob:
    Type: AWS::Glue::Job
    Properties:
      Name: RedshiftToParquetJob
      Role: !GetAtt GlueJobRole.Arn
      Command:
        Name: glueetl
        ScriptLocation: s3://jon-scripts-bucket/redshifttoparquet.py
        PythonVersion: 3
      DefaultArguments:
        "--job-language": "python"
        "--TempDir": "s3://jon-s3-bucket-for-redshift/temp/"
        "--enable-metrics": "true"
        "--enable-continuous-cloudwatch-log": "true"
        "--enable-spark-ui": "true"
      MaxRetries: 1
      Timeout: 30
      GlueVersion: 4.0
      NumberOfWorkers: 2
      WorkerType: G.1X
      ExecutionProperty:
        MaxConcurrentRuns: 1

  ProcessedDataCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: ProcessedDataCrawler
      Role: !GetAtt GlueJobRole.Arn
      DatabaseName: lakehouse_glue_db
      Targets:
        S3Targets:
          - Path: s3://jon-s3-bucket-for-redshift/processed/orders/
          - Path: s3://jon-s3-bucket-for-redshift/processed/customers/
          - Path: s3://jon-s3-bucket-for-redshift/processed/products/
          - Path: s3://jon-s3-bucket-for-redshift/processed/dim_segments/
          - Path: s3://jon-s3-bucket-for-redshift/processed/dim_channels/
          - Path: s3://jon-s3-bucket-for-redshift/processed/dim_categories/
          - Path: s3://jon-s3-bucket-for-redshift/processed/dim_locations/
      TablePrefix: ""
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: LOG
      RecrawlPolicy:
        RecrawlBehavior: CRAWL_EVERYTHING

  RedshiftAdminUser:
    Type: AWS::IAM::User
    Properties:
      UserName: redshift-admin
      LoginProfile:
        Password: TempStrongP@ssw0rd2025!
        PasswordResetRequired: false
      Policies:
        - PolicyName: RedshiftAdminFullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - redshift:*
                  - redshift-data:*
                  - secretsmanager:*
                  - s3:GetObject
                  - s3:ListBucket
                  - iam:GetRole
                  - iam:ListRoles
                  - glue:GetDatabase
                  - glue:GetDatabases
                  - glue:GetTable
                  - glue:GetTables
                  - glue:GetPartition
                  - glue:GetPartitions
                  - glue:GetConnection
                  - glue:GetConnections
                  - glue:GetCatalogImportStatus
                  - glue:SearchTables
                Resource: "*"

  RedshiftAdminGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: redshift-admin-group
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonRedshiftFullAccess
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  AddUserToGroup:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref RedshiftAdminGroup
      Users:
        - !Ref RedshiftAdminUser

  RedshiftSuperAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: RedshiftSuperAccessRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - redshift.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RedshiftFullAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - kms:*
                  - logs:*
                  - glue:*
                  - redshift:*
                  - redshift-data:*
                  - secretsmanager:*
                  - iam:GetRole
                  - iam:PassRole
                  - iam:ListRoles
                  - ec2:Describe*
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:AttachNetworkInterface
                  - cloudwatch:*
                  - sns:Publish
                  - elasticloadbalancing:Describe*
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupEgress
                  - rds:DescribeDBInstances
                  - rds:DescribeDBClusters
                  - rds:CreateDBSnapshot
                  - rds:CopyDBSnapshot
                  - rds:DescribeDBSnapshots
                  - rds:DeleteDBSnapshot
                Resource: "*"

  InitialSetupStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt LambdaExecutionRole.Arn
      StateMachineName: InitialLakehouseSetup
      DefinitionString: !Sub |
        {
          "Comment": "Initial Setup: Run Lambdas -> Glue Job -> Crawler",
          "StartAt": "CreateDimensions",
          "States": {
            "CreateDimensions": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${CreateDimensionsLambda}",
                "Payload": {}
              },
              "Next": "GenerateProducts"
            },
            "GenerateProducts": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${GenerateProductsLambda}",
                "Payload": {}
              },
              "Next": "GenerateCustomers"
            },
            "GenerateCustomers": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${GenerateCustomersLambda}",
                "Payload": {}
              },
              "Next": "GenerateOrders"
            },
            "GenerateOrders": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${GenerateOrdersLambda}",
                "Payload": {}
              },
              "Next": "RunGlueJob"
            },
            "RunGlueJob": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${RedshiftToParquetGlueJob}"
              },
              "Next": "RunGlueCrawler"
            },
            "RunGlueCrawler": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${StartGlueCrawlerLambda}",
                "Payload": {}
              },
              "End": true
            }
          }
        }
      DefinitionSubstitutions:
        CreateDimensionsLambda: !GetAtt CreateDimensionsLambda.Arn
        GenerateProductsLambda: !GetAtt GenerateProductsLambda.Arn
        GenerateCustomersLambda: !GetAtt GenerateCustomersLambda.Arn
        GenerateOrdersLambda: !GetAtt GenerateOrdersLambda.Arn
        RedshiftToParquetGlueJob: !Ref RedshiftToParquetGlueJob
        StartGlueCrawlerLambda: !GetAtt StartGlueCrawlerLambda.Arn


  StartGlueCrawlerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: StartGlueCrawlerLambda
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.11
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import boto3
          import os

          def lambda_handler(event, context):
              crawler_name = os.environ.get('CRAWLER_NAME')
              glue = boto3.client('glue')
              response = glue.start_crawler(Name=crawler_name)
              return {"status": "started", "crawler_name": crawler_name}
      Timeout: 60
      Environment:
        Variables:
          CRAWLER_NAME: !Ref ProcessedDataCrawler


Outputs:
  StepFunctionName:
    Description: Step function to run customers and orders
    Value: !Ref GenerateStepFunction

  IAMUsername:
    Description: The IAM Username
    Value: !Ref RedshiftAdminUser
