AWSTemplateFormatVersion: '2010-09-09'
Description: Lakehouse infrastructure with Lambda containers and scheduling

Parameters:
  BucketName:
    Type: String
    Default: jon-s3-bucket-for-redshift

Resources:

  LakehouseBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaS3ExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${BucketName}/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: '*'
              - Effect: Allow
                Action:
                 - lambda:InvokeFunction
                Resource:
                  - arn:aws:lambda:us-west-1:286036002000:function:GenerateCustomers
                  - arn:aws:lambda:us-west-1:286036002000:function:GenerateOrders

  CreateDimensionsLambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: CreateDimensions
      Role: !GetAtt LambdaExecutionRole.Arn
      PackageType: Image
      Code:
        ImageUri: 286036002000.dkr.ecr.us-west-1.amazonaws.com/simple-docker-service-0678d45e4fd7:latest
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName

  GenerateProductsLambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: GenerateProducts
      Role: !GetAtt LambdaExecutionRole.Arn
      PackageType: Image
      Code:
        ImageUri: 286036002000.dkr.ecr.us-west-1.amazonaws.com/simple-docker-service-02225da002d3:latest
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName

  GenerateCustomersLambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: GenerateCustomers
      Role: !GetAtt LambdaExecutionRole.Arn
      PackageType: Image
      Code:
        ImageUri: 286036002000.dkr.ecr.us-west-1.amazonaws.com/simple-docker-service-02526725bcad:latest
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName

  GenerateOrdersLambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: GenerateOrders
      Role: !GetAtt LambdaExecutionRole.Arn
      PackageType: Image
      Code:
        ImageUri: 286036002000.dkr.ecr.us-west-1.amazonaws.com/simple-docker-service-06b0d872c033:latest
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName

  GenerateStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt LambdaExecutionRole.Arn
      StateMachineName: GenerateFactTablesFlow
      DefinitionString: !Sub |
        {
          "StartAt": "GenerateCustomers",
          "States": {
            "GenerateCustomers": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${GenerateCustomersLambda}"
              },
              "Next": "GenerateOrders"
            },
            "GenerateOrders": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${GenerateOrdersLambda}"
              },
              "End": true
            }
          }
        }

  WeeklyStepFunctionTrigger:
    Type: AWS::Events::Rule
    Properties:
      Name: WeeklyGenerateFactsTrigger
      ScheduleExpression: cron(0 1 ? * SUN *)  # Every Sunday 1AM UTC
      State: ENABLED
      Targets:
        - Arn: !GetAtt GenerateStepFunction.Arn
          Id: StepFunctionTarget
          RoleArn: !GetAtt EventBridgeToStepFunctionRole.Arn


  EventBridgeToStepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EventBridgeToStepFunctionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowStartExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !GetAtt GenerateStepFunction.Arn


  PermissionToInvokeStepFunction:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AllowEventBridgeToTriggerStepFunction
      Roles:
        - !Ref LambdaExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource: !GetAtt GenerateStepFunction.Arn

  RedshiftLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: RedshiftLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RedshiftLambdaPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Allow full control of Redshift Serverless resources
              - Effect: Allow
                Action:
                  - redshift-serverless:*
                Resource: '*'
              # Allow retrieving the AWS account ID
              - Effect: Allow
                Action:
                  - sts:GetCallerIdentity
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:DescribeAccountAttributes
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeVpcs 
                  - ec2:DescribeAvailabilityZones
                Resource: '*'

  BootstrapRedshiftLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: BootstrapRedshift
      Role: !GetAtt RedshiftLambdaExecutionRole.Arn
      Runtime: python3.11
      Handler: index.handler
      Code:
        ZipFile: |
          import boto3
          import os

          # Initialize Redshift Serverless and STS clients
          redshift = boto3.client('redshift-serverless')
          region = os.environ.get("AWS_REGION", "us-west-1")

          # Define Redshift namespace and workgroup settings
          NAMESPACE = "lakehouse-ns"
          WORKGROUP = "lakehouse-wg"

          def handler(event, context):
              account_id = boto3.client("sts").get_caller_identity()["Account"]
              IAM_ROLE_ARN = f"arn:aws:iam::{account_id}:role/RedshiftRole"

              # Check if namespace exists; if not, create it
              try:
                  redshift.get_namespace(namespaceName=NAMESPACE)
                  print(f"Namespace {NAMESPACE} already exists.")
              except redshift.exceptions.ResourceNotFoundException:
                  redshift.create_namespace(
                      namespaceName=NAMESPACE,
                      adminUsername="adminuser",
                      adminUserPassword="SuperSecure123!"
                  )
                  print(f"Namespace {NAMESPACE} created.")

              # Check if workgroup exists; if not, create it
              try:
                  redshift.get_workgroup(workgroupName=WORKGROUP)
                  print(f"Workgroup {WORKGROUP} already exists.")
              except redshift.exceptions.ResourceNotFoundException:
                  redshift.create_workgroup(
                      workgroupName=WORKGROUP,
                      namespaceName=NAMESPACE,
                      baseCapacity=32,
                      publiclyAccessible=True
                  )
                  print(f"Workgroup {WORKGROUP} created.")

              return {
                  "status": "success",
                  "namespace": NAMESPACE,
                  "workgroup": WORKGROUP
              }
      Timeout: 900
      Description: "Creates Redshift Serverless namespace and workgroup"

  DeleteRedshiftLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DeleteRedshiftInfra
      Role: !GetAtt RedshiftLambdaExecutionRole.Arn
      Runtime: python3.11
      Handler: index.handler
      Code:
        ZipFile: |
          import boto3
          import time

          redshift = boto3.client('redshift-serverless')

          NAMESPACE = "lakehouse-ns"
          WORKGROUP = "lakehouse-wg"

          def wait_for_workgroup_deletion(workgroup_name, client, retries=10, delay=10):
              for attempt in range(retries):
                  try:
                      client.get_workgroup(workgroupName=workgroup_name)
                      print(f"Workgroup still exists (attempt {attempt + 1}). Waiting {delay}s...")
                      time.sleep(delay)
                  except client.exceptions.ResourceNotFoundException:
                      print("Workgroup deletion confirmed.")
                      return
              raise Exception("Timeout waiting for workgroup to be deleted.")

          def handler(event, context):
              try:
                  redshift.delete_workgroup(workgroupName=WORKGROUP)
                  print(f"Workgroup {WORKGROUP} deletion initiated.")
                  wait_for_workgroup_deletion(WORKGROUP, redshift)
              except redshift.exceptions.ResourceNotFoundException:
                  print(f"Workgroup {WORKGROUP} does not exist.")

              try:
                  redshift.delete_namespace(namespaceName=NAMESPACE)
                  print(f"Namespace {NAMESPACE} deleted.")
              except redshift.exceptions.ResourceNotFoundException:
                  print(f"Namespace {NAMESPACE} does not exist.")

              return {
                  "status": "success",
                  "namespace": NAMESPACE,
                  "workgroup": WORKGROUP
              }
      Timeout: 900
      Description: "Deletes Redshift Serverless namespace and workgroup"

  GlueJobRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: GlueJobExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: GlueS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - arn:aws:s3:::jon-s3-bucket-for-redshift
                  - arn:aws:s3:::jon-s3-bucket-for-redshift/*
                  - arn:aws:s3:::jon-scripts-bucket
                  - arn:aws:s3:::jon-scripts-bucket/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - glue:GetDatabase
                  - glue:GetTable
                  - glue:CreateTable
                  - glue:UpdateTable
                  - glue:DeleteTable
                Resource: '*'

  RawToParquetGlueJob:
    Type: AWS::Glue::Job
    Properties:
      Name: RawToParquetJob
      Role: !GetAtt GlueJobRole.Arn
      Command:
        Name: glueetl
        ScriptLocation: s3://jon-scripts-bucket/redshifttoparquet.py
        PythonVersion: 3
      DefaultArguments:
        "--job-language": "python"
        "--TempDir": "s3://jon-s3-bucket-for-redshift/temp/"
        "--enable-metrics": "true"
        "--enable-continuous-cloudwatch-log": "true"
        "--enable-spark-ui": "true"
      MaxRetries: 1
      Timeout: 30
      GlueVersion: 4.0
      NumberOfWorkers: 2
      WorkerType: G.1X

Outputs:
  StepFunctionName:
    Description: Step function to run customers and orders
    Value: !Ref GenerateStepFunction
